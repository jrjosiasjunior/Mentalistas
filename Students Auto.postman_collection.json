{
	"info": {
		"_postman_id": "7a93cc1c-56e4-47f8-be3d-21a866564b9d",
		"name": "Students Auto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24273352"
	},
	"item": [
		{
			"name": "New student -Sucess update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"jasonData = pm.response.json();\r",
							"let requestBody = pm.request.body.raw;\r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.environment.set(\"_id\",jasonData.newStudent._id);\r",
							"pm.environment.set(\"Mail\",jasonData.newStudent.mail)\r",
							"pm.environment.set(\"PassWord\",senha)\r",
							"pm.environment.set(\"Cpf\",jasonData.newStudent.cpf)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//testando se os valores são correspondentes\r",
							"pm.test (\"Verificando nome is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"FirstName\")).to.eql(JSON.parse(responseBody).newStudent.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Nome contém apenas letras\", function () { \r",
							"     pm.expect(jasonData.newStudent.name).to.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/); \r",
							"});\r",
							"\r",
							"pm.test (\"Verificando sobrenome is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"LastName\")).to.eql(JSON.parse(responseBody).newStudent.lastName);\r",
							"});\r",
							"\r",
							"pm.test(\"Sobrenome contém apenas letras\", function () { \r",
							"     pm.expect(jasonData.newStudent.lastName).to.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/); \r",
							"});\r",
							"\r",
							"pm.test (\"Verificando email is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"Mail\")).to.eql(JSON.parse(responseBody).newStudent.mail);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando telefone is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"Phone\")).to.eql(JSON.parse(responseBody).newStudent.phone);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando cpf is true\", function(){\r",
							"   var cpfdoBody = jasonData.newStudent.cpf;\r",
							"   var strcpf = cpfdoBody.toString();\r",
							"    pm.expect(pm.variables.get(\"Cpf\")).to.eql(strcpf);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se cpf é númerico\", function(){\r",
							"    var cpfdoBody2 = jasonData.newStudent.cpf;\r",
							"    var intcpf = parseInt(cpfdoBody2,10)  \r",
							"   pm.expect(typeof intcpf).to.equal(\"number\");\r",
							"});\r",
							"\r",
							"//verificando o tamanho numérico do cpf do body\r",
							"pm.test(\"Validação do tamanho do cpf sem máscara\", function () {\r",
							"    var cpfdoBody2 = jasonData.newStudent.cpf;\r",
							"    pm.expect(cpfdoBody2.length).to.eql(11);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"Verificando Role is true\", function(){\r",
							"\r",
							"    pm.expect(pm.variables.get(\"CurrentRole\")).to.eql(JSON.parse(responseBody).newStudent.role);\r",
							"});\r",
							"\r",
							"pm.test(\"Função possui tamanho correto\", function () {\r",
							"     var requestBody = pm.request.body.raw; \r",
							"    let funcao = JSON.parse(requestBody).role\r",
							"    pm.expect(funcao.length).to.lessThan(51);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando zipCode is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"ZipCode\")).to.eql(JSON.parse(responseBody).newStudent.address[0].zipCode);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando city is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"City\")).to.eql(JSON.parse(responseBody).newStudent.address[0].city);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando country is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"Country\")).to.eql(JSON.parse(responseBody).newStudent.address[0].country);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Teste se cidade tem formato válido\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let cidade = JSON.parse(requestBody).address[0].city\r",
							"   cidaderegex = /^[A-Za-z0-9áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'ª°\\s-]+$/ ;\r",
							"   pm.expect(cidade).to.match(cidaderegex)\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando state is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"Uf\")).to.eql(JSON.parse(responseBody).newStudent.address[0].state);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"O campo \\\"estado\\\" só pode conter letras maiúsculas e 2 caracteres.\", function () {\r",
							"   const estado = pm.response.json().newStudent.address[0].state\r",
							"   console.log(estado)\r",
							"    pm.expect(estado).to.have.length(02)\r",
							"   pm.expect(estado).to.match(/^[A-Z]+$/)\r",
							"\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando bairro is true e quantidade caracteres\", function(){\r",
							"    if (jasonData.newStudent.address[0].district.length < 51){\r",
							"    pm.expect(pm.variables.get(\"district\")).to.eql(JSON.parse(responseBody).newStudent.address[0].district);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Teste se o campo bairro é alfanumérico e aceita caracteres especiais\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let bairro = JSON.parse(requestBody).address[0].district\r",
							"   console.log(bairro) \r",
							"   bairroregex = /^[A-Za-z0-9áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'ª°\\s-]+$/ ;\r",
							"   pm.expect(bairro).to.match(bairroregex)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"Verificando street is true\", function(){\r",
							"    if (jasonData.newStudent.address[0].street.length <= 80){\r",
							"    pm.expect(pm.variables.get(\"Street\")).to.eql(JSON.parse(responseBody).newStudent.address[0].street);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Teste se o campo logradouro é alfanumérico e aceita caracteres especiais\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let rua = JSON.parse(requestBody).address[0].street\r",
							"   ruaregex = /^[A-Za-z0-9áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'ª°\\s-]+$/ ;\r",
							"   pm.expect(rua).to.match(ruaregex)\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando number is true\", function(){\r",
							"    numerodaresposta = JSON.parse(responseBody).newStudent.address[0].number\r",
							"    let numeroenviroment = pm.variables.get(\"AddressNumber\");\r",
							"    if (typeof numeroenviroment !== \"string\"){\r",
							"        var textonum = numeroenviroment.toString();   \r",
							"    }\r",
							"  //  let numero = parseInt(numerodaresposta,10)\r",
							"    pm.expect(textonum).to.eql(numerodaresposta);\r",
							" \r",
							"});\r",
							"\r",
							"pm.test(\"Teste de tamanho do número\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let num = JSON.parse(requestBody).address[0].number  \r",
							"   pm.expect(num).to.length.lessThan(11)\r",
							"});\r",
							"\r",
							"pm.test(\"Teste se o campo número está correto\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let num = JSON.parse(requestBody).address[0].number\r",
							"   pm.expect(num).to.match(/^[A-Za-z0-9/]+$/)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"Verificando complement is true\", function(){\r",
							"    var requestBody = pm.request.body.raw;\r",
							"    let complement = JSON.parse(requestBody).address[0].complement\r",
							"    if (complement.length <= 10){\r",
							"    pm.expect(pm.variables.get(\"Complement\")).to.eql(JSON.parse(responseBody).newStudent.address[0].complement);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"teste se a senha está no formato aceito\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(senha).to.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\S]{8,}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"teste se a senha é alfanumérica\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(senha).to.match(/^[A-Za-z0-9áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ\\S]+$/);\r",
							" \r",
							"});\r",
							"\r",
							"pm.test(\"teste se a senha aceita caracteres especiais\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(senha).to.match(/^[A-Za-z0-9áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ\\S\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Testando se o email aceita alfanumérico e se está no formato correto\", function () {\r",
							"var jsonData = pm.response.json()\r",
							"var mailr = jsonData.newStudent.mail\r",
							"  pm.expect(mailr.length).to.lessThan(51)\r",
							"  pm.expect(mailr).to.include(\"@\")\r",
							"  pm.expect(mailr).to.match(/^[a-zA-Z0-9_.-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,}(?:\\.[a-zA-Z]{2,})?$/)\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"mail\": \"{{Mail}}\",\r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n    \"cpf\" :\"{{Cpf}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"Token\", JSON.parse(responseBody).token)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"mail\":\"{{Mail}}\",\r\n    \"password\": \"{{PassWord}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password is Empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"jasonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Mensagem de senha is true\", function(){\r",
							"    pm.expect(\"O campo 'senha' é obrigatório.\").to.eql(jasonData.error[0])\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"teste se a senha está no formato aceito\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(senha).to.not.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\S]).{8,}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							" let requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"jasonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Mensagem is true\", function(){\r",
							"    if (senha === null){\r",
							"    pm.expect(\"O campo 'senha' é obrigatório.\").to.eql(jasonData.error[0])\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password must be at least 8 characters long",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"lL1234@\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password without special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"lL123465\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password without upper case letter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"ll1234@5\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password without lower case letter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"LL1234@5\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password without number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"Llkjcau@\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Password must allow a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length <= 50){\r",
							"    pm.expect(\"O campo 'senha' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.greaterThan(50);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrR@123456\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update lastName input over 100 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname.length > 100){\r",
							"    pm.expect(\"O campo 'sobrenome' deve possuir no máximo 100 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrrdfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrr\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update lastName is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname === \"\"){\r",
							"    pm.expect(\"O campo 'sobrenome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update lastName is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname === null){\r",
							"    pm.expect(\"O campo 'sobrenome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": null,\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update lastName only allows letters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"format= pm.response.lastname;\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"       pm.expect(\"O campo 'sobrenome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    \r",
							"       \r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let lastname = JSON.parse(requestBody).lastName\r",
							"    let intlastname = parseInt(lastname,10)  \r",
							"   pm.expect(typeof intlastname).to.not.equal(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"4555\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Lastname accepts only three special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'sobrenome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let lastname = JSON.parse(requestBody).lastName\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(lastname).to.not.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"Al@-José\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Name does not allow numbers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'nome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let name = JSON.parse(requestBody).name\r",
							"    let nameint = parseInt(name,10)  \r",
							"    console.log(typeof name)\r",
							"   pm.expect(typeof nameint).to.not.equal(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"5697\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Name accepts only three special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'nome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let name = JSON.parse(requestBody).name\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(name).to.not.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"Al@-José\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Name input over 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let nome = JSON.parse(requestBody).name\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (nome.length > 50){\r",
							"    pm.expect(\"O campo 'nome' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrr\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Name is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo 'nome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Name is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo 'nome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"console.log(senha)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": null,\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update role input over 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"     var requestBody = pm.request.body.raw; \r",
							"    let funcao = JSON.parse(requestBody).role\r",
							"    if (funcao.length > 50){\r",
							"    pm.expect(\"O campo 'função' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"Alunomarianeeeaqacoderstreinamentocommarianeeeaqacoderstreinamentocomfgjhltoryeydvdhfjfkrusuw\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update role only allows specific imputs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"     var requestBody = pm.request.body.raw; \r",
							"    let funcao = JSON.parse(requestBody).role\r",
							"    if (funcao.length > 50){\r",
							"    pm.expect(\"O campo 'função' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"teste\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update role is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let funcao = JSON.parse(requestBody).role\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (funcao === \"\"){\r",
							"    pm.expect(\"O campo 'função' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Role is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let funcao = JSON.parse(requestBody).role\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (funcao === null){\r",
							"    pm.expect(\"O campo 'função' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": null,\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update country field accepts up to 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo País permite até 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Teste se o campo país está ok\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let country = JSON.parse(requestBody).address[0].country  \r",
							"   pm.expect(country).to.not.length.lessThan(51)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"sdfvbhjbsdfgvjhsbdfgbkjhbcxfgjhbsdgfbkjsdfbhjsdfvjd\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Country is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let country = JSON.parse(requestBody).address[0].country\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is O campo País é obrigatório.\", function () {\r",
							"    if (country === \"\"){\r",
							"    pm.expect( \"O campo País é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update Country is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let country = JSON.parse(requestBody).address[0].country\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is O campo País é obrigatório.\", function () {\r",
							"    if (country === null){\r",
							"    pm.expect( \"O campo País é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": null,\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister/{{_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister",
						"{{_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Country is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let country = JSON.parse(requestBody).address[0].country\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is O campo País é obrigatório.\", function () {\r",
							"    if (country === \"\"){\r",
							"    pm.expect( \"O campo País é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n       \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Country is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let country = JSON.parse(requestBody).address[0].country\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is O campo País é obrigatório.\", function () {\r",
							"    if (country === null){\r",
							"    pm.expect( \"O campo País é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n       \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": null,\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "country field accepts up to 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo País permite até 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Teste se o campo país está ok\", function () {\r",
							"   var requestBody = pm.request.body.raw;\r",
							"   let country = JSON.parse(requestBody).address[0].country  \r",
							"   pm.expect(country).to.not.length.lessThan(51)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n       \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"sdfvbhjbsdfgvjhsbdfgbkjhbcxfgjhbsdgfbkjsdfbhjsdfvjd\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "role input over 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"     var requestBody = pm.request.body.raw; \r",
							"    let funcao = JSON.parse(requestBody).role\r",
							"    if (funcao.length > 50){\r",
							"    pm.expect(\"O campo 'função' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"Alunomarianeeeaqacoderstreinamentocommarianeeeaqacoderstreinamentocomfgjhltoryeydvdhfjfkrusuw\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "role only allows specific imputs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"     var requestBody = pm.request.body.raw; \r",
							"    let funcao = JSON.parse(requestBody).role\r",
							"    if (funcao.length > 50){\r",
							"    pm.expect(\"O campo 'função' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"teste\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "role is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let funcao = JSON.parse(requestBody).role\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (funcao === \"\"){\r",
							"    pm.expect(\"O campo 'função' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \" \",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Role is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let funcao = JSON.parse(requestBody).role\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (funcao === null){\r",
							"    pm.expect(\"O campo 'função' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": null,\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password is Empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"jasonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Mensagem de senha is true\", function(){\r",
							"    pm.expect(\"O campo 'senha' é obrigatório.\").to.eql(jasonData.error[0])\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"teste se a senha está no formato aceito\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(senha).to.not.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\S]).{8,}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							" let requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"jasonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Mensagem is true\", function(){\r",
							"    if (senha === null){\r",
							"    pm.expect(\"O campo 'senha' é obrigatório.\").to.eql(jasonData.error[0])\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": null,\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password must be at least 8 characters long",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"lL1234@\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password without special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"lL123456\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password without upper case letter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"ll1234@5\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password without lower case letter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"LL1234@6\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password without number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length < 8){\r",
							"    pm.expect(\"O campo 'senha' deverá conter no mínimo 8 caracteres, sendo pelo menos 1 letra maiúscula, 1 letra minúscula, 1 caractere numérico e 1 caractere especial. \").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.below(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"Llkjcau@\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password must allow a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; \r",
							"let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (senha.length <= 50){\r",
							"    pm.expect(\"O campo 'senha' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Validação do tamanho do campo para teste \", function () {\r",
							"    var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"     let senha = JSON.parse(requestBody).password\r",
							"    pm.expect(senha).to.length.greaterThan(50);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrR@123456\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "lastName input over 100 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname.length > 100){\r",
							"    pm.expect(\"O campo 'sobrenome' deve possuir no máximo 100 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrrdfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrr\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}  \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "lastName is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname === \"\"){\r",
							"    pm.expect(\"O campo 'sobrenome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "lastName is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"let requestBody = pm.request.body.raw; \r",
							"let lastname = JSON.parse(requestBody).lastName\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (lastname === null){\r",
							"    pm.expect(\"O campo 'sobrenome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": null,\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": {{AddressNumber}},\r\n            \"complement\": \"{{Complement}}\"\r\n         }]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "lastName only allows letters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"jasonData = pm.response.json();\r",
							"format= pm.response.lastname;\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"       pm.expect(\"O campo 'sobrenome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    \r",
							"       \r",
							"});\r",
							"\r",
							"//verifica o tamanho da array\r",
							"pm.test(\"Validação do tamanho da resposta\", function () {\r",
							"    pm.expect(jasonData.error.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let lastname = JSON.parse(requestBody).lastName\r",
							"    let intlastname = parseInt(lastname,10)  \r",
							"   pm.expect(typeof intlastname).to.not.equal(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"5555\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Lastname accepts only three special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'sobrenome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let lastname = JSON.parse(requestBody).lastName\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(lastname).to.not.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"{{FirstName}}\",\r\n    \"lastName\": \"Al@-{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name does not allow numbers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'nome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let name = JSON.parse(requestBody).name\r",
							"    let nameint = parseInt(name,10)  \r",
							"    console.log(typeof name)\r",
							"   pm.expect(typeof nameint).to.not.equal(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"5697\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name accepts only three special character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect( \"O campo 'nome' só pode conter letras e o caractere especial '‘'.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se campo de teste está de acordo para o teste atual\", function(){\r",
							"    let requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let name = JSON.parse(requestBody).name\r",
							"  //  let intphone = parseInt(phonereq,10)  \r",
							"   pm.expect(name).to.not.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"Al@-{{FirstName}}\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name input over 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw;\r",
							"let nome = JSON.parse(requestBody).name\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    if (nome.length > 50){\r",
							"    pm.expect(\"O campo 'nome' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\": \"dfghjklpotregjunfcdertkiotmnhgfproiuytrqacmjewasdffrrrr\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo 'nome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\":\"\",\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function emailProvider() {\r",
							"\r",
							"    var emailProvider = [\"@hotmail.com\", \"@gmail.com\", \"@gmail.com.br\", \"@yahoo.com.br\", \"@terra.com.br\", \"@outlook.com\", \"@live.com\", \"@icloud.com\"];\r",
							"\r",
							"    var randomItem = emailProvider[Math.floor(Math.random() * emailProvider.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"EmailProvider\", emailProvider());\r",
							"\r",
							"//pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}') + pm.environment.get(\"EmailProvider\"));\r",
							"pm.environment.set(\"Mail\", firstName() + Math.floor(Math.random()*1000)  + pm.environment.get(\"EmailProvider\"));\r",
							"\r",
							"function firstName() {\r",
							"\r",
							"    var firstName = [\"Miguel\",\"Sophia\",\"Davi\",\"Alice\",\"Arthur\",\"Julia\",\"Pedro\",\"Isabella\",\"Gabriel\",\"Manuela\",\"Bernardo\",\"Laura\",\"Lucas\",\"Flávia\",\"Luiza\",\"Matheus\",\"Noah\", \"Valentina\",\"Rafael\",\"Giovanna\",\"Heitor\",\"Enzo\",\"Helena\",\"Guilherme\",\"Beatriz\",\"Nicolas\",\"Leticia\",\"Lorenzo\",\"Lara\",\"Gustavo\",\"Mariana\",\"Felipe\",\"Nicole\",\"Samuel\",\"Joice\", \"Dener\",\"Rafaela\",\"Augusto\",\"Heloísa\",\"Daniel\",\"Isadora\",\"Vitor\",\"Lívia\",\"Leonardo\",\"Henrique\",\"Juliana\",\"Theo\",\"Lorena\",\"Murilo\",\"Gabriela\",\"Eduardo\",\"Yasmin\",\"Pedro\", \"Henriqueta\",\"Isabelly\",\"Pietro\",\"Sarah\",\"Kauã\",\"Jaqueline\",\"Isaac\",\"Letícia\",\"Caio\",\"Mariele\",\"Vinicius\",\"Melissa\",\"Benjamin\",\"Marina\",\"João\",\"Clara\",\"Lucca\",\"Cecília\",\"Miguel\",\"Esther\",\"Bryan\",\"Emanuelly\",\"Joaquim\",\"Rebeca\",\"Victor\",\"Bella\",\"Thiago\",\"Lavínia\",\"Antônio\",\"Vitória\",\"Mario\",\"Bianca\",\"Francisco\",\"Catarina\",\"Ronaldo\",\"Larissa\",\"Bruno\",\"Margarida\",\"Emanuel\",\"Fernanda\",\"Marcos\",\"Amanda\",\"Ian\",\"Alícia\",\"Luiz\",\"Carolina\",\"Rodrigo\",\"Agatha\",\"Otávio\",\"Gabrielly\"];\r",
							"\r",
							"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"FirstName\", firstName());\r",
							"\r",
							"function lastName() {\r",
							"\r",
							"    var lastName = [\"Alves da Silva\", \"Andrade Barbosa\", \"Barbosa Oliveira\", \"Oliveira da Silva\", \"Alves Pereira\", \"Conceição Barbosa\", \"Allen Young\", \"Hernandez King\", \"Wright Lopez\", \"Hill Scott\", \"Green Adams\", \"Conceição da Costa\", \"da Costa Oliveira\", \"Rodrigues de Oliveira\", \"Amaral Neto de Souza\", \"Pereira da Conceição\", \"Barros Neto de Andrade\", \"Borges de Andrade Pereira da Silva\", \"Batista Campos do Amaral\", \"Cardoso de Oliveira\", \"Pontes Guimarães\", \"Dias de Jesus\", \"Barbos de Lima\", \"Gonçalves da Silva\", \"Gonsalves de Lima\", \"Pereira de Oliveira Batista\", \"Dias de Freitas\", \"Ferreira\", \"Garcia da Paixão\", \"Lima Lopes\", \"Jesus da Silva\", \"da Silva de Lima\", \"da Silva Gonsalves Texeira\", \"Fernandes de Paula\", \"de Paula da Silva\", \"Barbosa de Mello Oliveira\", \"Oliveira Neto Conceição da Paixão\"];\r",
							"\r",
							"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"LastName\", lastName());\r",
							"\r",
							"\r",
							"\r",
							"function currentrole() {\r",
							"\tvar currentrole = [\"Analista de testes (funcional)\", \r",
							"\t\"Analista de testes (automatizado)\", \r",
							"\t\"Desenvolvedor backend\", \r",
							"\t\"Desenvolvedor frontend\", \r",
							"    ]\r",
							"\r",
							"var randomItem = currentrole[Math.floor(Math.random() * currentrole.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"CurrentRole\", currentrole());\r",
							"\r",
							"function Complemento() {\r",
							"\tvar complemento = [\"casa\", \r",
							"\t\"apto 23\", \r",
							"\t\"predio\", \r",
							"\t\"mercearia\", \r",
							"\t\"clínica\"\r",
							"\t]\r",
							"\r",
							"var randomItem = complemento[Math.floor(Math.random() * complemento.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.environment.set(\"Complement\", Complemento())\r",
							"\r",
							"function profile(){\r",
							"    var profile = [\"Aluno\", \"Administrador\"]\r",
							"    var randomItem = profile[Math.floor(Math.random() * profile.length)];\r",
							"    return randomItem\r",
							"}\r",
							"pm.environment.set(\"Profile\", profile());\r",
							"\r",
							"\r",
							"/* \r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio(); //aleatorio já devolve string, logo não precisa de toString\r",
							"  const num2 = aleatorio();\r",
							"  const num3 = aleatorio();\r",
							"\r",
							"  const dig1 = dig(num1, num2, num3); //agora só uma função dig\r",
							"  const dig2 = dig(num1, num2, num3, dig1); //mesma função dig aqui\r",
							"\r",
							"  //aqui com interpolação de strings fica bem mais legivel\r",
							"  return `${num1}${num2}${num3}${dig1}${dig2}`;\r",
							"} \r",
							"\r",
							"//o quarto parametro(n4) só será recebido para o segundo digito\r",
							"function dig(n1, n2, n3, n4) {  \r",
							"  //as concatenações todas juntas uma vez que são curtas e legíveis\r",
							"  //split divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array.\r",
							"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));\r",
							"  \r",
							"  if (n4 !== undefined){ //se for o segundo digito coloca o n4 no sitio certo\r",
							"    nums[9] = n4;\r",
							"  }\r",
							"  \r",
							"  let x = 0;\r",
							"   \r",
							"  //o j é também iniciado e incrementado no for para aproveitar a própria sintaxe dele\r",
							"  //o i tem inicios diferentes se é 1º ou 2º digito verificador\r",
							"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {\r",
							"    x += parseInt(nums[j]) * i;\r",
							"  }\r",
							"  \r",
							"  const y = x % 11;\r",
							"  //ternário aqui pois ambos os retornos são simples e continua legivel\r",
							"  return y < 2 ? 0 : 11 - y; \r",
							"}\r",
							"\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							" //o preenchimento dos zeros à esquerda é mais facil com a função padStart da string\r",
							" return (\"\" + aleat).padStart(3, '0');\r",
							"\r",
							"}\r",
							"*/\r",
							"function gerarCpf() {\r",
							"  const num1 = aleatorio();\r",
							"  console.log(num1)\r",
							"  const num2 = aleatorio();\r",
							" console.log(num2)\r",
							"  const num3 = aleatorio();\r",
							"  console.log(num3)\r",
							"  const dig1 = dig();\r",
							" console.log(dig1)\r",
							"  const dig2 = dig();\r",
							"  return `${num1}${num2}${num3}${dig1}`;\r",
							"}\r",
							"\r",
							"function dig() { \r",
							" // retorna o menor número inteiro maior ou igual a \"x\"\r",
							"  min = Math.ceil(10); \r",
							"  max = Math.floor(99);\r",
							"  return Math.floor(Math.random() * (max - min) + min);\r",
							" }\r",
							"\r",
							" \r",
							"//função aleatorio que retorna um número aleatório formatado como uma string de três dígitos.\r",
							"//caso eu queira que sempre começe com 0 multiplico por 100\r",
							"function aleatorio() {\r",
							"  const aleat = Math.floor(Math.random() * 999);\r",
							"  return aleat.toString().padStart(3, '0'); \r",
							"  //O método padStart() preenche a string original com um determinado caractere, ou conjunto de caracteres, (várias vezes, se necessário) até que a string resultante atinja o comprimento fornecido. \r",
							"  \r",
							"}\r",
							"                         \r",
							" console.log(typeof gerarCpf());\r",
							"\r",
							"pm.environment.set(\"Cpf\", gerarCpf());\r",
							" \r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"function country() {\r",
							"\r",
							"    var country = [\"África do Sul\",\r",
							"\"Angola\",\r",
							"\"Argélia\",\r",
							"\"Benim\",\r",
							"\"Botsuana\",\r",
							"\"Burquina Faso\",\r",
							"\"Burúndi\",\r",
							"\"Cabo Verde\",\r",
							"\"Camarões\",\r",
							"\"Chade\",\r",
							"\"Comores\",\r",
							"\"Congo-Brazzaville\",\r",
							"\"Costa do Marfim\",\r",
							"\"Egito\",\r",
							"\"Eritreia\",\r",
							"\"Essuatíni\",\r",
							"\"Etiópia\",\r",
							"\"Gabão\",\r",
							"\"Gâmbia\",\r",
							"\"Gana\",\r",
							"\"Guiné\",\r",
							"\"Guiné Equatorial\",\r",
							"\"Guiné-Bissau\",\r",
							"\"Jibuti\",\r",
							"\"Lesoto\",\r",
							"\"Libéria\",\r",
							"\"Líbia\",\r",
							"\"Madagáscar\",\r",
							"\"Maláui\",\r",
							"\"Mali\",\r",
							"\"Marrocos\",\r",
							"\"Maurícia\",\r",
							"\"Mauritânia\",\r",
							"\"Moçambique\",\r",
							"\"Namíbia\",\r",
							"\"Níger\",\r",
							"\"Nigéria\",\r",
							"\"Quénia\",\r",
							"\"República Centro-Africana\",\r",
							"\"República Democrática do Congo\",\r",
							"\"Ruanda\",\r",
							"\"São Tomé e Príncipe\",\r",
							"\"Seicheles\",\r",
							"\"Senegal\",\r",
							"\"Serra Leoa\",\r",
							"\"Somália\",\r",
							"\"Sudão\",\r",
							"\"Sudão do Sul\",\r",
							"\"Tanzânia\",\r",
							"\"Togo\",\r",
							"\"Tunísia\",\r",
							"\"Uganda\",\r",
							"\"Zâmbia\",\r",
							"\"Zimbábue\",\r",
							"\"Antiga e Barbuda\",\r",
							"\"Argentina\",\r",
							"\"Bahamas\",\r",
							"\"Barbados\",\r",
							"\"Belize\",\r",
							"\"Bolívia\",\r",
							"\"Brasil\",\r",
							"\"Canadá\",\r",
							"\"Chile\",\r",
							"\"Colômbia\",\r",
							"\"Costa Rica\",\r",
							"\"Cuba\",\r",
							"\"Dominica\",\r",
							"\"Equador\",\r",
							"\"Estados Unidos\",\r",
							"\"Granada\",\r",
							"\"Guatemala\",\r",
							"\"Guiana\",\r",
							"\"Haiti\",\r",
							"\"Honduras\",\r",
							"\"Jamaica\",\r",
							"\"México\",\r",
							"\"Nicarágua\",\r",
							"\"Panamá\",\r",
							"\"Paraguai\",\r",
							"\"Peru\",\r",
							"\"República Dominicana\",\r",
							"\"Salvador\",\r",
							"\"Santa Lúcia\",\r",
							"\"São Cristóvão e Neves\",\r",
							"\"São Vicente e Granadinas\",\r",
							"\"Suriname\",\r",
							"\"Trindade e Tobago\",\r",
							"\"Uruguai\",\r",
							"\"Venezuela\",\r",
							"\"Afeganistão\",\r",
							"\"Arábia Saudita\",\r",
							"\"Arménia\",\r",
							"\"Azerbaijão\",\r",
							"\"Bangladexe\",\r",
							"\"Barém\",\r",
							"\"Brunei\",\r",
							"\"Butão\",\r",
							"\"Camboja\",\r",
							"\"Catar\",\r",
							"\"Cazaquistão\",\r",
							"\"China\",\r",
							"\"Coreia do Norte\",\r",
							"\"Coreia do Sul\",\r",
							"\"Cuaite\",\r",
							"\"Emirados Árabes Unidos\",\r",
							"\"Estado da Palestina\",\r",
							"\"Filipinas\",\r",
							"\"Geórgia\",\r",
							"\"Iémen\",\r",
							"\"Índia\",\r",
							"\"Indonésia\",\r",
							"\"Irão\",\r",
							"\"Iraque\",\r",
							"\"Israel\",\r",
							"\"Japão\",\r",
							"\"Jordânia\",\r",
							"\"Laus\",\r",
							"\"Líbano\",\r",
							"\"Malásia\",\r",
							"\"Maldivas\",\r",
							"\"Mianmar\",\r",
							"\"Mongólia\",\r",
							"\"Nepal\",\r",
							"\"Omã\",\r",
							"\"Paquistão\",\r",
							"\"Quirguistão\",\r",
							"\"Singapura\",\r",
							"\"Síria\",\r",
							"\"Sri Lanca\",\r",
							"\"Tailândia\",\r",
							"\"Taiuã\",\r",
							"\"Tajiquistão\",\r",
							"\"Turcomenistão\",\r",
							"\"Turquia\",\r",
							"\"Usbequistão\",\r",
							"\"Vietname\",\r",
							"\"Albânia\",\r",
							"\"Alemanha\",\r",
							"\"Andorra\",\r",
							"\"Áustria\",\r",
							"\"Bélgica\",\r",
							"\"Bielorrússia\",\r",
							"\"Bósnia e Herzegovina\",\r",
							"\"Bulgária\",\r",
							"\"Chipre\",\r",
							"\"Cosovo\",\r",
							"\"Croácia\",\r",
							"\"Dinamarca\",\r",
							"\"Eslováquia\",\r",
							"\"Eslovénia\",\r",
							"\"Espanha\",\r",
							"\"Estónia\",\r",
							"\"Finlândia\",\r",
							"\"França\",\r",
							"\"Grécia\",\r",
							"\"Hungria\",\r",
							"\"Irlanda\",\r",
							"\"Islândia\",\r",
							"\"Itália\",\r",
							"\"Letónia\",\r",
							"\"Listenstaine\",\r",
							"\"Lituânia\",\r",
							"\"Luxemburgo\",\r",
							"\"Macedónia do Norte\",\r",
							"\"Malta\",\r",
							"\"Moldávia\",\r",
							"\"Mónaco\",\r",
							"\"Montenegro\",\r",
							"\"Noruega\",\r",
							"\"Países Baixos\",\r",
							"\"Polónia\",\r",
							"\"Portugal\",\r",
							"\"Reino Unido\",\r",
							"\"República Checa\",\r",
							"\"Roménia\",\r",
							"\"Rússia\",\r",
							"\"São Marinho\",\r",
							"\"Sérvia\",\r",
							"\"Suécia\",\r",
							"\"Suíça\",\r",
							"\"Ucrânia\",\r",
							"\"Vaticano\",\r",
							"\"Austrália\",\r",
							"\"Fiji\",\r",
							"\"Ilhas Marechal\",\r",
							"\"Micronésia\",\r",
							"\"Nauru\",\r",
							"\"Nova Zelândia\",\r",
							"\"Palau\",\r",
							"\"Papua Nova Guiné\",\r",
							"\"Quiribáti\",\r",
							"\"Salomão\",\r",
							"\"Samoa\",\r",
							"\"Timor-Leste\",\r",
							"\"Tonga\",\r",
							"\"Tuvalu\",\r",
							"\"Vanuatu\"];\r",
							"\r",
							"    var randomItem = country[Math.floor(Math.random() * country.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Country\", country());\r",
							"\r",
							"function zipCode() {\r",
							"\r",
							"    var zipCode = [\"02077045\",\"13458580\",\"03015017\",\"05892387\",\"08452252\",\"04877265\",\"08320685\",\"04182125\",\"02987265\",\"08240174\",\"04405185\",\"88058115\",\"88020230\",\"88020231\",\"88090561\",\"88066405\",\"88058256\",\"88040445\",\"88048418\",\"88066420\",\"88066407\",\"52031216\",\"50920825\",\"50810065\",\"52090168\",\"52160231\",\"52121032\",\"50790140\",\"51310540\",\"52190480\",\"50610631\",\"41321205\",\"41320210\",\"41321240\",\"41321830\",\"41321835\",\"41321841\",\"41231085\",\"41342565\",\"41205560\",\"41370075\",\"23545037\",\"23548007\",\"23595180\",\"23580420\",\"23555240\",\"23587545\",\"23548013\",\"23555306\",\"23580430\",\"23548163\",\"30672772\",\"31744620\",\"30666482\",\"30640438\",\"30668176\",\"31846022\",\"31540083\",\"30518321\",\"30451535\",\"31741051\",\"69036662\",\"69036664\",\"69030418\",\"69036666\",\"69015754\",\"69075763\",\"69053770\",\"69008410\",\"69020083\",\"69065016\",\"74959198\",\"74988833\",\"74786610\",\"74786640\",\"74786612\",\"74786642\",\"74786614\",\"74786644\",\"74786616\",\"74786646\",\"64090451\",\"64018375\",\"64013450\",\"64023110\",\"64033512\",\"64039650\",\"64033588\",\"64013451\",\"64018380\",\"64090452\",\"29033302\",\"29047058\",\"29024043\",\"29033350\",\"29032785\",\"29032030\",\"29024040\",\"29023047\",\"29033395\",\"29024060\"];\r",
							"\r",
							"    var randomItem = zipCode[Math.floor(Math.random() * zipCode.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"pm.variables.set(\"ZipCode\", zipCode());\r",
							"\r",
							"\r",
							"  \r",
							"function phoneNumber(){\r",
							"    var phoneNumber = [\"981718551\",\"986598149\",\"999620167\",\"981861718\",\"973714954\",\"994891686\",\"994784952\",\"971625825\",\"985140652\",\"987413824\",\"987781142\",\"984188003\",\"999821321\",\"993430652\",\"993045548\",\"967274357\",\"992232553\",\"974150681\",\"996339359\",\"998635153\",\"995849584\",\"983842883\",\"982269573\",\"967526971\",\"968115645\",\"986324175\",\"980385840\",\"991288109\",\"976384812\",\"997351513\",\"982583888\",\"980369422\",\"993503986\",\"971677223\",\"987517526\",\"932463287\",\"982667642\",\"983469266\",\"983834520\",\"928307244\",\"934350014\",\"925534867\",\"937577682\",\"939785785\",\"982689768\",\"982867532\",\"929103677\",\"993691882\",\"938735351\",\"982281327\",\"998258412\",\"987741123\",\"998616841\",\"969589739\",\"979067875\",\"982184334\",\"976394096\",\"991234321\",\"981257546\",\"982632630\",\"992626653\",\"988358123\",\"995675745\",\"991087267\",\"996552241\",\"973458395\",\"993529733\",\"981657207\",\"980550207\",\"997571464\",\"987028232\",\"969557496\",\"985128115\",\"995283334\",\"996327279\",\"986204821\",\"995313152\",\"980632187\",\"993661853\",\"974338237\",\"985117245\",\"992213414\",\"996784882\",\"988157645\",\"976869654\",\"997752956\",\"987536854\",\"972447079\",\"974956642\",\"969822121\",\"967707683\",\"971781421\",\"997361833\",\"983332805\",\"979558299\",\"980555328\",\"979312516\",\"992168724\",\"994301288\",\"967775760\"];\r",
							"\r",
							"    var randomItem = phoneNumber[Math.floor(Math.random() * phoneNumber.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"/*\r",
							"function areaCode(){\r",
							"    var areaCode = [\"11\",\r",
							"\"12\",\r",
							"\"13\",\r",
							"\"14\",\r",
							"\"15\",\r",
							"\"16\",\r",
							"\"17\",\r",
							"\"18\",\r",
							"\"19\",\r",
							"\"21\",\r",
							"\"22\",\r",
							"\"24\",\r",
							"\"27\",\r",
							"\"28\",\r",
							"\"31\",\r",
							"\"32\",\r",
							"\"33\",\r",
							"\"34\",\r",
							"\"35\",\r",
							"\"37\",\r",
							"\"38\",\r",
							"\"41\",\r",
							"\"42\",\r",
							"\"43\",\r",
							"\"44\",\r",
							"\"45\",\r",
							"\"46\",\r",
							"\"47\",\r",
							"\"48\",\r",
							"\"49\",\r",
							"\"51\",\r",
							"\"53\",\r",
							"\"54\",\r",
							"\"55\",\r",
							"\"61\",\r",
							"\"62\",\r",
							"\"63\",\r",
							"\"64\",\r",
							"\"65\",\r",
							"\"66\",\r",
							"\"67\",\r",
							"\"68\",\r",
							"\"69\",\r",
							"\"71\",\r",
							"\"73\",\r",
							"\"74\",\r",
							"\"75\",\r",
							"\"77\",\r",
							"\"79\",\r",
							"\"81\",\r",
							"\"82\",\r",
							"\"83\",\r",
							"\"84\",\r",
							"\"85\",\r",
							"\"86\",\r",
							"\"87\",\r",
							"\"88\",\r",
							"\"89\",\r",
							"\"91\",\r",
							"\"92\",\r",
							"\"93\",\r",
							"\"94\",\r",
							"\"95\",\r",
							"\"96\",\r",
							"\"97\",\r",
							"\"98\",\r",
							"\"99\"];\r",
							"\r",
							"    var randomItem = areaCode[Math.floor(Math.random() * areaCode.length)];\r",
							"\r",
							"    return randomItem\r",
							"}\r",
							"\r",
							"pm.environment.set(\"AreaCode\", areaCode());\r",
							"*/\r",
							"pm.environment.set(\"Phone\",  pm.environment.get(\"AreaCode\") + phoneNumber());\r",
							"\r",
							"function gerarSenha() {\r",
							"    var randomItem = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PassWord\", gerarSenha() + \"Ps1_@\");\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var requestBody = pm.request.body.raw; // Obtém o corpo da solicitação RAW\r",
							"    let senha = JSON.parse(requestBody).password\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is true\", function () {\r",
							"    pm.expect(\"O campo 'nome' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0]);\r",
							"});\r",
							"\r",
							"console.log(senha)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"name\":null,\r\n    \"lastName\": \"{{LastName}}\",\r\n    \"mail\": \"{{Mail}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"cpf\" :{{Cpf}},\r\n    \"className\": \"{{ClassName}}\",\r\n    \"role\": \"{{CurrentRole}}\",\r\n    \"password\": \"{{PassWord}}\",\r\n    \"address\":[\r\n        {\r\n            \"zipCode\": \"{{ZipCode}}\",\r\n            \"country\": \"{{Country}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"state\": \"{{Uf}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{Street}}\",\r\n            \"number\": \"{{AddressNumber}}\",\r\n            \"complement\": \"{{Complement}}\"\r\n         } \r\n    ]\r\n         \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/studentRegister",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentRegister"
					]
				}
			},
			"response": []
		}
	]
}